@inherits GameComponentBase

@if (Location != null && Client != null)
{
    <Paragraph Margin="Margin.Is0" Style="@($"height: 2rem; font-size: 70%; background: {Location.Color ?? "transparent"}; color: {Location.Color?.TextColor() ?? "black"};")">
        @if (Location.Type == LocationType.Property)
        {
            @if (Location.Improvements == Location.MaxImprovements(Client.CurrentGame))
            {
                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Hotel" />
            }
            else if (Location.Improvements > 1)
            {
                    @for (int i = 1; i < Location.Improvements; i++)
                    {
                        <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Home" />
                    }
            }
        }
    </Paragraph>
    <Heading Margin="Margin.Is0" Style="height: 2rem;" Class="text-center" Size="HeadingSize.Is4"><Icon Name="@($"fa-{Location.Icon}")" /></Heading>
    <Paragraph Margin="Margin.Is0" Style="height: 1rem;" class="text-center" Color="TextColor.Primary">
        @foreach (var player in Client.CurrentGame.Players)
        {
            @if (player.Position == Location.Position)
            {
                <Icon Name="@($"fa-{player.Icon}")" />
            }
        }
    </Paragraph>
    <Paragraph Margin="Margin.Is0" Style="height: 1rem; font-size: 70%;" class="@($"text-center mb-0 {(!string.IsNullOrEmpty(Location.Owner) ? "text-black-50" : "font-weight-bold")}")">
        @if (Location.Price > 0)
        {
            @Location.Price.ToString("C0")
        }
    </Paragraph>
}

@code {
    [Parameter] public int Row { get; set; }
    [Parameter] public int Column { get; set; }
    private int Rows { get; set; }
    private Location Location { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Client?.CurrentGame != null)
        {
            Rows = Client.CurrentGame.Locations.Count / 4;
            Location = Client.CurrentGame.Locations.ElementAtOrDefault(
                Row == 0 ? Rows + Column :
                Column == 0 ? Rows - Row :
                Column == Rows ? Rows * 2 + Row :
                Row == Rows ? Rows * 4 - Column : -1);
        }
    }

}
