@page "/{Id:guid}"
@attribute [Authorize]
@inherits PageBase
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@implements IDisposable

<LoadingIndicator Visible="IsLoading" />

@if (CurrentGame == null)
{
    if (!IsLoading)
    {
        <Alert Color="Color.Danger" Visible="true">
            <AlertMessage>
                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle" />
            </AlertMessage>
            <AlertDescription>
                The specified game does not exist
            </AlertDescription>
        </Alert>
    }
    return;
}

<div class="container-fluid flex-grow-1 d-flex p-0">
    <div class="position-relative d-flex flex-column full-height" style="max-width: 25vw; min-width: 250px;">
        <div class="mh-50-scroll">
            <Card>
                <CardHeader><Heading Size="HeadingSize.Is5"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Users" /> Players</Heading></CardHeader>
                <ListGroup>
                    @foreach (var player in CurrentGame.Players.OrderBy(t => t.Order))
                    {
                        <ListGroupItem Active="CurrentGame.IsStarted && player.Name == CurrentGame.Turn" Disabled="player.Name != CurrentUser && player.ConnectionId == null">
                            <div class="d-flex w-100 justify-content-between align-items-start">
                                @if (player.Name == CurrentUser)
                                {
                                    <Dropdown>
                                        <DropdownToggle Margin="Margin.Is0" Padding="Padding.Is0"><Icon Name="@($"fa-{player.Icon}")" /></DropdownToggle> @player (me)
                                        <DropdownMenu>
                                            @foreach (var icon in PlayerIcons)
                                            {
                                                <DropdownItem Clicked="() => SetIcon(icon)"><Icon Name="@($"fa-{icon}")" /></DropdownItem>
                                            }
                                        </DropdownMenu>
                                    </Dropdown>
                                }
                                else
                                {
                                    <div><Icon Name="@($"fa-{player.Icon}")" /> @player</div>
                                }
                                <div class="ml-3">
                                    <Badge Color="Color.Success">@player.Money.ToString("C")</Badge>
                                    <Badge Color="Color.Info">@CurrentGame.OwnedPropertyValue(player.Name).ToString("C")</Badge>
                                </div>
                            </div>
                        </ListGroupItem>
                    }
                    @if (CurrentGame.IsStarted)
                    {
                        <ListGroupItem>
                            <div class="d-flex w-100 justify-content-between align-items-start">
                                <div class="font-italic"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Parking"></Icon> Free Parking</div>
                                <Badge Margin="Margin.Is3.FromLeft" Color="Color.Success">@CurrentGame.FreeParking.ToString("C")</Badge>
                            </div>
                        </ListGroupItem>
                    }
                </ListGroup>
            </Card>
            @if (!CurrentGame.IsStarted)
            {
                <Card>
                    <CardHeader><Heading Size="HeadingSize.Is5"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock" /> Waiting Room</Heading></CardHeader>
                    <ListGroup>
                        @foreach (var player in CurrentGame.WaitingRoom)
                        {
                            <ListGroupItem>
                                <div class="d-flex w-100 justify-content-between">
                                    <Heading Size="HeadingSize.Is5">@player.Name</Heading>
                                    @if (CurrentUser == CurrentGame.Owner)
                                    {
                                        <Button Color="Color.Primary" Size="ButtonSize.Small" Clicked="() => Admit(player.Name)"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DoorOpen" /> Admit</Button>
                                    }
                                </div>
                            </ListGroupItem>
                        }
                    </ListGroup>
                </Card>
            }
        </div>
        <div class="scroll-container">
            <Card Class="scroll-content" Padding="Padding.Is0">
                <CardHeader><Heading Size="HeadingSize.Is5"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Comments" /> Chat</Heading></CardHeader>
                <CardBody Padding="Padding.Is1" Style="overflow-y: auto">
                    @foreach (var message in CurrentGame.Messages.OrderByDescending(t => t.DateTime))
                    {
                        <div class="toast m-1" role="alert" aria-live="assertive" aria-atomic="true" style="opacity: 1; backdrop-filter: none; -webkit-backdrop-filter: none;">
                            <div class="toast-header">
                                <Icon Name="UserIcon(message.From)" Margin="Margin.Is2.FromRight" />
                                <strong class="mr-auto">@(message.From ?? "")</strong>
                                <small class="text-muted">@FormatDateRelativeToNow(message.DateTime)</small>
                            </div>
                            <div class="toast-body @(message.IsChat ? "text-primary font-weight-bold" : "text-muted font-italic")">
                                @message.Value
                            </div>
                        </div>
                    }
                </CardBody>
            </Card>
        </div>
    </div>
    <div class="flex-grow-1 d-flex flex-column">
        <Buttons Margin="Margin.Is2">
            <Button Color="Color.Success" Clicked="Start" Disabled="!IsStartGameEnabled" Outline="!IsStartGameEnabled"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlayCircle" /> Start Game</Button>
            <Button Color="Color.Warning" Clicked="End" Disabled="!IsEndGameEnabled" Outline="!IsEndGameEnabled"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Stop" /> End Game</Button>
            <Button Color="Color.Danger" Clicked="Retire" Disabled="!IsRetireEnabled" Outline="!IsRetireEnabled"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.SignOutAlt" /> Retire</Button>
        </Buttons>
        <div class="scroll-container">
            <div class="scroll-content p-2">
                <Alert Color="Color.Warning" Visible="!CurrentGame.IsStarted">
                    <AlertDescription>
                        <Heading Size="HeadingSize.Is2">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationTriangle" /> The Current Game has not started yet
                        </Heading>
                        @if (IsStartGameEnabled)
                        {
                            <Button Color="Color.Success" Clicked="Start"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlayCircle" /> Start Game</Button>
                        }
                    </AlertDescription>
                </Alert>
                <Alert Color="Color.Danger" Visible="!CurrentGame.IsActive">
                    <AlertDescription>
                        <Heading Size="HeadingSize.Is2">
                            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle" /> The Current Game has ended
                        </Heading>
                        <Button Color="Color.Danger" Clicked="@(() => NavigationManager.NavigateTo("/"))"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Backward" /> Back to Games</Button>
                    </AlertDescription>
                </Alert>
                <Alert Color="Color.Info" Visible="CurrentGame.IsStarted">
                    <AlertMessage>
                        @if (CurrentGame.LastRoll1 != 0)
                        {
                            @if (CurrentGame.Turn != CurrentUser)
                            {
                                <Heading Size="HeadingSize.Is2"><Icon Name="@($"fa-{TurnPlayer?.Icon}")" /> rolled <Icon Name="DiceIcon(CurrentGame.LastRoll1)" /> <Icon Name="DiceIcon(CurrentGame.LastRoll2)" /></Heading>
                                if (!string.IsNullOrEmpty(CurrentGame.TurnMessage))
                                {
                                    <Heading Size="HeadingSize.Is4">
                                        <Icon Name="@($"fa-{TurnPlayer?.Icon}")" />@CurrentGame.TurnMessage
                                        @if (!string.IsNullOrEmpty(CurrentLocation?.Icon))
                                        {
                                            <Icon Name="@($"fa-{CurrentLocation?.Icon}")" />
                                        }
                                    </Heading>
                                }
                            }
                            else
                            {
                                <Heading Size="HeadingSize.Is2">You rolled <Icon Name="DiceIcon(CurrentGame.LastRoll1)" /> <Icon Name="DiceIcon(CurrentGame.LastRoll2)" /></Heading>
                                if (!string.IsNullOrEmpty(CurrentGame.TurnMessage))
                                {
                                    <Heading Size="HeadingSize.Is4">
                                        You @CurrentGame.TurnMessage
                                        @if (!string.IsNullOrEmpty(CurrentLocation?.Icon))
                                        {
                                            <Icon Name="@($"fa-{CurrentLocation?.Icon}")" />
                                        }
                                    </Heading>
                                }
                            }
                        }
                        @if (CurrentGame.LastRoll1 == 0 || (CurrentGame.LastRoll1 == CurrentGame.LastRoll2 && CurrentGame.DoubleCount >= 0))
                        {
                            if (CurrentGame.Turn == CurrentUser)
                            {
                                <Paragraph>Please Roll the Dice</Paragraph>
                                <Button Color="Color.Primary" Clicked="Roll"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Dice" /> Roll</Button>
                                @if (TurnPlayer.IsInJail)
                                {
                                    <Button Color="Color.Danger" Clicked="Pay"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MoneyBillWave" /> Pay Jail Bond</Button>
                                    if (TurnPlayer.GetOutOfJailFree > 0)
                                    {
                                        <Button Color="Color.Success" Clicked="GetOutOfJailFree"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DoorOpen" /> Get Out of Jail Free</Button>
                                    }
                                }
                            }
                            else
                            {
                                <Paragraph>Wating for <Icon Name="@($"fa-{TurnPlayer?.Icon}")" /> to roll...</Paragraph>
                            }
                        }
                        else if (CurrentUser == CurrentGame.Turn)
                        {
                            if (CurrentGame.Players.Any(t => t.MoneyOwed > 0M))
                            {
                                <Paragraph>Waiting on other players to pay...</Paragraph>
                            }
                            else
                            {
                                <Button Color="Color.Primary" Clicked="EndTurn"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.HourglassEnd" /> Finish Turn</Button>
                            }
                        }
                    </AlertMessage>
                </Alert>
                <Alert Color="Color.Danger" Visible="Me?.MoneyOwed > 0">
                    <AlertMessage>
                        <Heading Size="HeadingSize.Is3">
                            You owe @Me.MoneyOwed.ToString("C") to @(Me.MoneyOwedTo ?? "the bank")
                        </Heading>
                        <Button Color="Color.Danger" Clicked="PayPlayerDebt"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MoneyBillWave" /> Pay</Button>
                    </AlertMessage>
                </Alert>
                <Alert Color="Color.Danger" Visible="CurrentGame.MoneyOwed > 0 && CurrentGame.Turn == CurrentUser">
                    <AlertMessage>
                        <Heading Size="HeadingSize.Is3">
                            You owe @CurrentGame.MoneyOwed.ToString("C") to @(CurrentGame.MoneyOwedTo ?? "the bank")
                        </Heading>
                        <Button Color="Color.Danger" Clicked="Pay"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MoneyBillWave" /> Pay</Button>
                    </AlertMessage>
                </Alert>
                <Alert Color="Color.Success" Visible="CurrentGame.Turn == CurrentUser && CurrentLocation != null && CurrentLocation.Owner == null && CurrentLocation.Price > 0">
                    <AlertMessage>
                        <Heading Size="HeadingSize.Is3">
                            Would you like to purchase @CurrentLocation?.Name for @CurrentLocation?.Price.ToString("C")?
                        </Heading>
                        <PropertyDisplay CurrentGame="CurrentGame" Location="CurrentLocation" />
                        <Button Color="Color.Success" Clicked="Buy"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MoneyBillWave" /> Buy</Button>
                    </AlertMessage>
                </Alert>
                <Card>
                    <CardHeader><CardTitle><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Building" /> My Properties</CardTitle></CardHeader>
                    <CardText Class="d-inline-flex flex-wrap">
                        @foreach (var property in CurrentGame.Locations.Where(t => t.Owner == CurrentUser).OrderBy(t => t.Position))
                        {
                            <div class="p-1">
                                <PropertyDisplay CurrentGame="CurrentGame" Location="property">
                                    <Buttons Margin="Margin.Is3">
                                        @if (!property.IsMortgaged)
                                        {
                                            if (property.Type == LocationType.Property && property.Improvements >= 1)
                                            {
                                                <Button Color="Color.Success" Size="ButtonSize.Small" Clicked="() => Upgrade(property.Position)"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Home" /> Upgrade</Button>
                                            }
                                            <Button Color="Color.Warning" Size="ButtonSize.Small" Clicked="() => Mortgage(property.Position)"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.HandHoldingUsd" /> Mortgage</Button>
                                        }
                                        else
                                        {
                                            <Button Color="Color.Danger" Size="ButtonSize.Small" Clicked="() => PayMortgage(property.Position)"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MoneyBillWave" /> Pay Mortgage</Button>
                                        }
                                    </Buttons>
                                </PropertyDisplay>
                            </div>
                        }
                    </CardText>
                </Card>
            </div>
        </div>
    </div>
</div>
<div class="input-group">
    <input type="text" class="form-control" @bind-value="MessageText" @bind-value:event="oninput" @onkeydown="KeyDown" />
    <div class="input-group-append">
        <Button Color="Color.Secondary" Disabled="@string.IsNullOrEmpty(MessageText)" Clicked="@(() => { Message(MessageText); MessageText = ""; })">Send</Button>
    </div>
</div>

<Modal @ref="GameOver">
    <ModalBackdrop />
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Game Over</ModalTitle>
        </ModalHeader>
        <ModalBody>
            The game has ended!
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="GameOver.Hide">OK</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="ErrorModal">
    <ModalBackdrop />
    <ModalContent>
        <ModalHeader Class="bg-danger text-white">
            <ModalTitle><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Bomb" /> Error</ModalTitle>
        </ModalHeader>
        <ModalBody>
            @ErrorMessage
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="ErrorModal.Hide">OK</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public Guid Id { get; set; }

    private HubConnection hub;
    public Game CurrentGame { get; set; }
    public AccessToken AccessToken { get; set; }
    public Modal GameOver { get; set; }
    public Modal ErrorModal { get; set; }
    public string ErrorMessage { get; set; }
    public static string[] PlayerIcons { get; } = new[] { "dragon", "ghost", "car", "ambulance", "broom", "candy-cane", "crown", "jedi", "fighter-jet", "gem", "gift", "ice-cream", "map-pin", "money-bill-alt", "rocket", "robot", "trophy", "tractor", "truck-monster", "user-secret" };
    public Player Me { get; set; }
    public Player TurnPlayer { get; set; }
    public Location CurrentLocation { get; set; }
    public string MessageText { get; set; }

    private bool IsCurrentOwner => CurrentGame != null && CurrentGame.Owner == CurrentUser;
    private bool IsStartGameEnabled => IsCurrentOwner && !CurrentGame.IsStarted;
    private bool IsEndGameEnabled => IsCurrentOwner && CurrentGame.IsStarted;
    private bool IsRetireEnabled => CurrentGame != null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            await base.OnInitializedAsync();
            await Join(Id);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async Task NewGame() => await Hub((object)CurrentUser, (object)await Prompt("Please enter a name for the new game"));
    public Task Join(Guid game) => Hub(game, (object)CurrentUser);
    public Task Admit(string user) => Hub(CurrentGame.Id, (object)user);
    public Task Start() => Hub(CurrentGame.Id);
    public Task Message(string message) => Hub(CurrentGame.Id, (object)message);
    public Task Roll() => Hub(CurrentGame.Id);
    public Task Pay() => Hub(CurrentGame.Id);
    public Task PayPlayerDebt() => Hub(CurrentGame.Id);
    public Task GetOutOfJailFree() => Hub(CurrentGame.Id);
    public Task Buy() => Hub(CurrentGame.Id);
    public Task Upgrade(int position) => Confirm(() => Hub(CurrentGame.Id, position));
    public Task Mortgage(int position) => Confirm(() => Hub(CurrentGame.Id, position));
    public Task PayMortgage(int position) => Confirm(() => Hub(CurrentGame.Id, position));
    public Task EndTurn() => Hub(CurrentGame.Id);
    public Task Retire() => Confirm(() => Hub(CurrentGame.Id));
    public Task End() => Confirm(() => Hub(CurrentGame.Id));
    public Task SetIcon(string icon) => Hub(CurrentGame.Id, (object)icon);

    private Task Hub([CallerMemberName] string name = "") => HubInvoke(name);
    private Task Hub(object arg0, [CallerMemberName] string name = "") => HubInvoke(name, arg0);
    private Task Hub(object arg0, object arg1, [CallerMemberName] string name = "") => HubInvoke(name, arg0, arg1);
    private Task Hub(object arg0, object arg1, object arg2, [CallerMemberName] string name = "") => HubInvoke(name, arg0, arg1, arg2);
    private Task Hub(object arg0, object arg1, object arg2, object arg3, [CallerMemberName] string name = "") => HubInvoke(name, arg0, arg1, arg2, arg3);

    private async Task HubInvoke(string methodName, params object[] args)
    {
        try
        {
            IsLoading = true;
            await StartHub();
            CurrentGame = await (args.Length switch
            {
                0 => hub.InvokeAsync<Game>(methodName),
                1 => hub.InvokeAsync<Game>(methodName, args[0]),
                2 => hub.InvokeAsync<Game>(methodName, args[0], args[1]),
                3 => hub.InvokeAsync<Game>(methodName, args[0], args[1], args[2]),
                4 => hub.InvokeAsync<Game>(methodName, args[0], args[1], args[2], args[3]),
                _ => throw new NotSupportedException()
            });
            UpdateGameData();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task Confirm(Func<Task> action)
    {
        if (await Confirm("Are you sure?"))
        {
            await action();
        }
    }

    private async Task StartHub()
    {
        if (!IsConnected)
        {
            hub = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/mhub"), options =>
                {
                    options.AccessTokenProvider = async () =>
                    {
                        if (AccessToken != null && AccessToken.Expires > DateTimeOffset.Now)
                        {
                            return AccessToken.Value;
                        }
                        if ((await AccessTokenProvider.RequestAccessToken()).TryGetToken(out var token))
                        {
                            AccessToken = token;
                            return token.Value;
                        }
                        return null;
                    };
                })
                .Build();
            hub.On<Game>("Update", game =>
            {
                if (!game.IsActive)
                {
                    GameOver.Show();
                }
                CurrentGame = game;
                UpdateGameData();
                StateHasChanged();
            });
            hub.On<string>("Error", errorMessage =>
            {
                ErrorMessage = errorMessage;
                ErrorModal.Show();
                StateHasChanged();
            });
            await hub.StartAsync();
        }
    }

    public string UserIcon(string user) => "fa-" + CurrentGame.Players.Find(t => t.Name == user)?.Icon;

    private void UpdateGameData()
    {
        Me = CurrentGame?.Players.FirstOrDefault(t => t.Name == CurrentUser);
        TurnPlayer = CurrentGame?.Turn != null ? CurrentGame.Players.FirstOrDefault(t => t.Name == CurrentGame.Turn) : null;
        CurrentLocation = CurrentGame.LastRoll1 != 0 ? CurrentGame.Locations.FirstOrDefault(t => t.Position == TurnPlayer?.Position) : null;
    }

    public static string DiceIcon(int value) => value switch
    {
        1 => Blazorise.Icons.FontAwesome.FontAwesomeIcons.DiceOne,
        2 => Blazorise.Icons.FontAwesome.FontAwesomeIcons.DiceTwo,
        3 => Blazorise.Icons.FontAwesome.FontAwesomeIcons.DiceThree,
        4 => Blazorise.Icons.FontAwesome.FontAwesomeIcons.DiceFour,
        5 => Blazorise.Icons.FontAwesome.FontAwesomeIcons.DiceFive,
        6 => Blazorise.Icons.FontAwesome.FontAwesomeIcons.DiceSix,
        _ => Blazorise.Icons.FontAwesome.FontAwesomeIcons.QuestionCircle,
    };

    public bool IsConnected => hub?.State == HubConnectionState.Connected;

    private async Task KeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Message(MessageText);
            MessageText = "";
        }
    }

    public void Dispose()
    {
        _ = hub.DisposeAsync();
    }
}
