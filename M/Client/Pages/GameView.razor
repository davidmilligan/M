@page "/{Id:guid}"
@attribute [Authorize]
@inherits PageBase
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject GameClient Client
@implements IDisposable

<LoadingIndicator Visible="Client.IsLoading || Client.IsConnecting" />

@if (Client.CurrentGame == null)
{
    if (!Client.IsLoading)
    {
        <Alert Color="Color.Danger" Visible="true">
            <AlertMessage><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle" /></AlertMessage>
            <AlertDescription>The specified game could not be found</AlertDescription>
        </Alert>
    }
    return;
}

<CascadingValue Value="Client">
    @if (Client.IsDisconnected)
    {
        <Alert Color="Color.Warning" Margin="Margin.Is0.FromBottom" Visible="true">
            <AlertMessage>
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is0.FromBottom"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle" /> You are not connected <Button Size="ButtonSize.Small" Padding="Padding.Is1" Color="Color.Warning" Clicked="Client.Refresh"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Redo" /> Reconnect</Button></Heading>
            </AlertMessage>
        </Alert>
    }
    <ScrollViewer>
        <div class="container-fluid flex-grow-1 d-flex p-1">
            <div class="position-relative d-flex flex-column full-height" style="max-width: 25vw; min-width: 225px;">
                <PlayerListDisplay />
                <MessagesDisplay />
            </div>
            <div class="flex-grow-1 d-flex flex-column">
                <Buttons Margin="Margin.Is2">
                    <Button Color="Color.Primary" Clicked="Client.Refresh"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Redo" /> Refresh</Button>
                    <Button Color="Color.Success" Clicked="Client.Start" Disabled="!Client.IsStartGameEnabled" Outline="!Client.IsStartGameEnabled"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlayCircle" /> Start Game</Button>
                    <Button Color="Color.Warning" Clicked="Client.End" Disabled="!Client.IsEndGameEnabled" Outline="!Client.IsEndGameEnabled"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Stop" /> End Game</Button>
                    <Button Color="Color.Danger" Clicked="Client.Retire" Disabled="!Client.IsRetireEnabled" Outline="!Client.IsRetireEnabled"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.SignOutAlt" /> Retire</Button>
                </Buttons>
                <div class="p-1">
                    <SelectIconDisplay />
                    <GameStatusDisplay />
                    <TurnInfoDisplay />
                    <MoneyOwedDisplay />
                    <PurchasePropertyDisplay />
                    <AuctionDisplay />
                    <ForSaleDisplay />
                    <BoardDisplay />
                    <PropertyDeedsDisplay />
                </div>
            </div>
        </div>
    </ScrollViewer>
    <SendMessageInput />
    <GameOverDisplay />
    <ErrorDisplay />
    <SellModal />
</CascadingValue>

@code {
    [Parameter] public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Client.IsLoading = true;
            await base.OnInitializedAsync();
            Client.ConfirmAsync = Confirm;
            await Client.Initialize(Id, CurrentUser, StateHasChanged);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            Client.IsLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose() => Client.Dispose();
}
