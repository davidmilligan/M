@page "/"
@attribute [Authorize]
@inherits PageBase
@inject HttpClient Http

<LoadingIndicator Visible="IsLoading" />

<div class="scroll-container">
    <div class="container-fluid d-flex scroll-content p-0">
        <div class="flex-grow-1">
            <Buttons Margin="Margin.Is2">
                <Button Color="Color.Primary" Clicked="NewGame"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle" /> New Game</Button>
                <Button Color="Color.Primary" Clicked="RefreshAsync"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Redo" /> Refresh</Button>
            </Buttons>
            <div class="p-2">
                <Heading Size="HeadingSize.Is3">Current Games</Heading>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell>Created</TableHeaderCell>
                            <TableHeaderCell>Players</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var game in ActiveGames.OrderByDescending(t => t.Created))
                        {
                            <TableRow Class="@(game.IsStarted ? "font-italic text-muted" : "")">
                                <TableRowCell>@game.Name</TableRowCell>
                                <TableRowCell>@FormatDateRelativeToNow(game.Created)</TableRowCell>
                                <TableRowCell>@string.Join(", ", game.Players.Select(t => t.Name))</TableRowCell>
                                <TableRowCell><Button Color="Color.Primary" Clicked="@(() => NavigationManager.NavigateTo($"/{game.Id}"))" Disabled="game.IsStarted && !game.Players.Any(p => p.Name == CurrentUser)"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.SignInAlt" /> Join</Button></TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </div>
        </div>
    </div>
</div>

@code {
    public Game[] ActiveGames { get; set; } = Array.Empty<Game>();

    protected override Task OnInitializedAsync() => RefreshAsync();

    private async Task RefreshAsync()
    {
        try
        {
            IsLoading = true;
            await base.OnInitializedAsync();
            ActiveGames = await Http.GetFromJsonAsync<Game[]>("Games") ?? Array.Empty<Game>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async Task NewGame()
    {
        var name = await Prompt("Please enter a name for the new game");
        var result = await Http.PostAsJsonAsync<string>("Games", name);
        if (result.StatusCode == HttpStatusCode.Created || result.StatusCode == HttpStatusCode.OK)
        {
            var newGame = await result.Content.ReadFromJsonAsync<Game>();
            NavigationManager.NavigateTo($"/{newGame.Id}");
        }
        else
        {
            await Alert($"An error occurred: {result.StatusCode}");
            await RefreshAsync();
        }
    }
}
